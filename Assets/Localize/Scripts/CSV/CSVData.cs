using UnityEngine;
using System.Collections;
using System.Runtime.ConstrainedExecution;
using System.Collections.Generic;
using System;

/// <summary>
/// CSV data.
/// To be generated by CSVReader class
/// </summary>
public class CSVData {

    /// <summary>
    /// The csv data.
    /// Outer Dictionary = Column Data
    /// Inner Dictionary = Row Data
    /// </summary>
    private Dictionary<int, Dictionary<int, string>> csvData = null;

    /// <summary>
    /// Initializes a new instance of the <see cref="CSVData"/> class.
    /// </summary>
    public CSVData()
    {
        csvData = new Dictionary<int, Dictionary<int, string>>();
    }

    /// <summary>
    /// Adds the data.
    /// </summary>
    /// <param name="columnIndex">Column index.</param>
    /// <param name="rowData">Row data.</param>
    public void AddData(int columnIndex, Dictionary<int, string> rowData)
    {
        if (csvData.ContainsKey(columnIndex))
        {
            Debug.LogError("Data with given columnIndex already exists.");
            return;
        }

        csvData.Add(columnIndex, rowData);
    }

    /// <summary>
    /// Gets the index of the column.
    /// </summary>
    /// <returns>The column index.</returns>
    /// <param name="columnKey">Column key.</param>
    /// <param name="rowIndex">Row index.</param>
    public int GetColumnIndex(string columnKey, int rowIndex)
    {
        if (string.IsNullOrEmpty(columnKey))
        {
            return -1;
        }

        for(int columnIndex = 0 ; columnIndex < csvData.Count ; columnIndex ++)
        {
            if (rowIndex >= csvData[columnIndex].Count)
            {
                continue;
            }

            if (string.Equals(columnKey, csvData[columnIndex][rowIndex]))
            {
                return columnIndex;
            }
        }

        return -1;
    }

    /// <summary>
    /// Gets the index of the row.
    /// </summary>
    /// <returns>The row index.</returns>
    /// <param name="rowKey">Row key.</param>
    /// <param name="columnIndex">Column index.</param>
    public int GetRowIndex(string rowKey, int columnIndex)
    {
        if (string.IsNullOrEmpty(rowKey)
            || columnIndex >= csvData.Count)
        {
            return -1;
        }

        for(int rowIndex = 0 ; rowIndex < csvData[columnIndex].Count ; rowIndex ++)
        {
            if (rowIndex >= csvData[columnIndex].Count)
            {
                continue;
            }

            if (string.Equals(rowKey, csvData[columnIndex][rowIndex]))
            {
                return rowIndex;
            }
        }

        return -1;
    }

    /// <summary>
    /// Gets the row and column index of cell that first matches the value
    /// Index data will be returned as Vector2 data
    /// 
    /// Vector2.x = RowIndex
    /// Vector2.y = ColumnIndex
    /// </summary>
    /// <returns>The column and row index.</returns>
    /// <param name="value">Value.</param>
    public Vector2 GetRowAndColumnIndex(string value)
    {
        for(int columnIndex = 0 ; columnIndex < csvData.Count ; columnIndex ++)
        {
            for(int rowIndex = 0 ; rowIndex < csvData[columnIndex].Count ; rowIndex ++)
            {
                if (string.Equals(value, csvData[columnIndex][rowIndex]))
                {
                    return new Vector2(rowIndex, columnIndex);
                }
            }
        }
        return new Vector2(-1, -1);
    }

    /// <summary>
    /// Gets the value at columnIndex and rowIndex.
    /// </summary>
    /// <returns>The <see cref="System.String"/>.</returns>
    /// <param name="columnIndex">Column index.</param>
    /// <param name="rowIndex">Row index.</param>
    public string GetValueAt(int columnIndex, int rowIndex)
    {
        // TODO surround with try catch or check error beforehand
        return csvData[columnIndex][rowIndex];
    }

    /// <summary>
    /// Gets the value at given row.
    /// </summary>
    /// <returns>The value at row.</returns>
    /// <param name="rowIndex">Row index.</param>
    /// <param name="keyColumnKey">Key column key.</param>
    /// <param name="keyRowIndex">Key row index.</param>
    public string GetValueAtRow(int rowIndex, string keyColumnKey, int keyRowIndex)
    {
        return GetValueAt(
            GetColumnIndex(keyColumnKey, keyRowIndex),
            rowIndex);
    }

    /// <summary>
    /// Gets the value at given column.
    /// </summary>
    /// <returns>The value at column.</returns>
    /// <param name="columnIndex">Column index.</param>
    /// <param name="keyRowKey">Key row key.</param>
    /// <param name="keyColumnIndex">Key column index.</param>
    public string GetValueAtColumn(int columnIndex, string keyRowKey, int keyColumnIndex)
    {
        return GetValueAt(
            columnIndex,
            GetRowIndex(keyRowKey, keyColumnIndex));
    }
}
